generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sport {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(50)
  iconKey String @db.VarChar(50)

  centersSports CenterSport[]
  courts        Court[]
  products      Product[]
  coaches       Coach[]
  lessons       Lesson[]
}

// #region 會員
model Member {
  id            BigInt    @id @default(autoincrement())
  email         String    @unique @db.VarChar(100)
  password      String    @db.VarChar(64)
  name          String?   @map("name") @db.VarChar(100)
  phone         String?   @map("phone") @db.VarChar(20)
  gender        Gender?
  birth         DateTime? @map("birth")
  avatar        String?   @map("avatar") @db.VarChar(255)
  address       String?   @map("address") @db.VarChar(200)
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  phoneVerified Boolean   @default(false) @map("phone_verified")
  role          Role      @default(user)
  firebaseUid   String?   @unique @map("firebase_uid") @db.VarChar(128)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  reservations     Reservation[]
  loginAttempt     LoginAttempt[]
  teamMembers      TeamMember[]
  carts            Cart[]
  productFavorites ProductFavorite[]
  orders           Order[]
  bookings         Booking[]
  centerRatings    CenterRating[] // 新增：評分關聯
  coach            Coach?
  joinRequests     TeamJoinRequest[] // <--- 新增此報名參加隊伍審核關聯
  messages         TeamMessageLite[] // <-- 新增訊息關聯
}

enum Role {
  admin
  user
}

enum Gender {
  male
  female
  none
}

model LoginAttempt {
  id          Int      @id @default(autoincrement())
  memberId    BigInt   @map("member_id")
  attemptTime DateTime @map("attempt_time")
  success     Boolean

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("login_attempt")
}

// #endregion 會員

// #region 場地
model Location {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(100)
  centers Center[]
}

model Center {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  location     Location       @relation(fields: [locationId], references: [id])
  locationId   Int            @map("location_id")
  centerSports CenterSport[]
  courts       Court[]
  address      String?        @db.VarChar(200)
  images       CenterImage[]
  latitude     Float?
  longitude    Float?
  ratings      CenterRating[] // 新增：評分關聯
}

model CenterImage {
  id       Int    @id @default(autoincrement())
  center   Center @relation(fields: [centerId], references: [id])
  centerId Int
  url      String @db.VarChar(255)
  order    Int    @default(0)

  @@map("center_image")
}

model CenterRating {
  id        Int      @id @default(autoincrement())
  center    Center   @relation(fields: [centerId], references: [id], onDelete: Cascade)
  centerId  Int      @map("center_id")
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  BigInt   @map("member_id")
  rating    Int // 1-5 星評分
  comment   String?  @db.Text // 評論內容（可選）
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([centerId, memberId]) // 每個會員對每個中心只能評分一次
  @@map("center_rating")
}

model CenterSport {
  center   Center @relation(fields: [centerId], references: [id])
  centerId Int
  sport    Sport  @relation(fields: [sportId], references: [id])
  sportId  Int

  @@id([centerId, sportId])
  @@map("center_sport")
}

model Court {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  center         Center          @relation(fields: [centerId], references: [id])
  centerId       Int             @map("center_id")
  sport          Sport           @relation(fields: [sportId], references: [id])
  sportId        Int             @map("sport_id")
  courtTimeSlots CourtTimeSlot[]
  teams          Team[]
  lessons        Lesson[]
}

model TimePeriod {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(20)
  timeSlots TimeSlot[]

  @@map("time_period")
}

model TimeSlot {
  id             Int             @id @default(autoincrement())
  startTime      DateTime        @map("start_time") @db.Time
  endTime        DateTime        @map("end_time") @db.Time
  label          String          @db.VarChar(20)
  timePeriod     TimePeriod      @relation(fields: [timePeriodId], references: [id])
  timePeriodId   Int             @map("time_period_id")
  courtTimeSlots CourtTimeSlot[]
  lessons        Lesson[]

  @@map("time_slot")
}

model CourtTimeSlot {
  id                       BigInt                     @id @default(autoincrement())
  court                    Court                      @relation(fields: [courtId], references: [id])
  courtId                  Int                        @map("court_id")
  timeSlot                 TimeSlot                   @relation(fields: [timeSlotId], references: [id])
  timeSlotId               Int                        @map("time_slot_id")
  price                    Decimal                    @db.Decimal(10, 2)
  ReservationCourtTimeSlot ReservationCourtTimeSlot[]

  @@unique([courtId, timeSlotId]) // 防止重複設定
  @@map("court_time_slot")
}

model Status {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  orders       Order[]
  reservations Reservation[]
  booking      Booking[]
}

model Reservation {
  id             BigInt                     @id @default(autoincrement())
  member         Member                     @relation(fields: [memberId], references: [id])
  memberId       BigInt                     @map("member_id")
  date           DateTime
  price          Decimal                    @db.Decimal(10, 2)
  payment        Payment                    @relation(fields: [paymentId], references: [id])
  paymentId      Int                        @map("payment_id")
  invoice        Invoice                    @relation(fields: [invoiceId], references: [id])
  invoiceId      Int                        @map("invoice_id")
  invoiceNumber  String                     @map("invoice_number") @db.VarChar(20)
  tax            String?                    @map("tax") @db.VarChar(8)
  carrier        String?                    @map("carrier") @db.VarChar(50)
  status         Status?                    @relation(fields: [statusId], references: [id])
  statusId       Int?                       @map("status_id")
  createdAt      DateTime                   @default(now()) @map("created_at")
  updatedAt      DateTime?                  @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  courtTimeSlots ReservationCourtTimeSlot[]
}

model ReservationCourtTimeSlot {
  reservation     Reservation   @relation(fields: [reservationId], references: [id])
  reservationId   BigInt        @map("reservation_id")
  courtTimeSlot   CourtTimeSlot @relation(fields: [courtTimeSlotId], references: [id])
  courtTimeSlotId BigInt        @map("court_time_slot_id")
  date            DateTime

  @@id([reservationId, courtTimeSlotId])
  @@unique([courtTimeSlotId, date])
  @@map("reservation_court_time_slot")
}

// #endregion 場地

//#region 組隊
model Level {
  id    Int    @id @default(autoincrement()) @map("id") @db.UnsignedInt
  name  String @unique @map("name") @db.VarChar(50)
  teams Team[]

  @@map("level")
}

// --- 新增一個 Enum 來表示申請狀態 ---
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Team {
  id            BigInt             @id @default(autoincrement()) @map("id")
  name          String             @unique @map("name") @db.VarChar(40)
  createdAt     DateTime?          @default(now()) @map("createdAt") @db.Timestamp(0)
  courtId       Int                @map("court_id")
  court         Court              @relation(fields: [courtId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  levelId       Int                @map("level_id") @db.UnsignedInt
  level         Level              @relation(fields: [levelId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  description   String?            @db.Text
  coverImageUrl String?            @map("cover_image_url") @db.VarChar(255)
  capacity      Int?               @map("capacity")
  isFeatured    Boolean            @default(false) @map("is_featured")
  TeamMember    TeamMember[]
  calendarMarks TeamCalendarMark[]
  messages      TeamMessageLite[]
  schedules     PracticeSchedule[]
  joinRequests  TeamJoinRequest[] // <--- 新增此關聯

  @@index([createdAt], map: "idx_team_created_at")
  @@fulltext([name, description])
  @@map("team")
}

model PracticeSchedule {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int // 1=週一, 2=週二, ..., 7=週日
  startTime DateTime @db.Time(6)
  endTime   DateTime @db.Time(6)

  // 與 Team model 的關聯
  // 注意：teamId 設為 BigInt 以匹配 Team.id
  teamId BigInt
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("practice_schedule")
}

model TeamCalendarMark {
  id        BigInt   @id @default(autoincrement())
  teamId    BigInt   @map("team_id")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  date      DateTime @map("date") @db.Date
  note      String?  @db.VarChar(140)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([teamId, date], map: "uk_team_date")
  @@index([teamId, date], map: "idx_team_date")
  @@map("team_calendar_mark")
}

model TeamMessageLite {
  id         BigInt   @id @default(autoincrement())
  teamId     BigInt   @map("team_id")
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  memberId   BigInt   @map("member_id")
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  orderIndex Int      @map("order_index")
  content    String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([teamId, orderIndex], map: "uk_team_msg_order")
  @@index([teamId, orderIndex], map: "idx_team_msg_order")
  @@map("team_message_lite")
}

model TeamMember {
  id        Int     @id @default(autoincrement()) @map("id")
  memberId  BigInt  @map("member_id")
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId    BigInt  @map("team_id")
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isCaptain Boolean @default(false) // <--- 新增此欄位來識別隊長

  @@unique([teamId, memberId], name: "uk_tmember_team_member")
  @@map("team_member")
}

// --- 新增一個模型來儲存加入隊伍的申請 ---
model TeamJoinRequest {
  id        Int           @id @default(autoincrement())
  teamId    BigInt
  team      Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  memberId  BigInt
  member    Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  status    RequestStatus @default(PENDING) // 申請狀態 (待處理/已批准/已拒絕)
  createdAt DateTime      @default(now())

  @@unique([teamId, memberId]) // 每個人對每個隊伍只能申請一次
  @@map("team_join_request")
}

// #endregion 組隊

// #region 商城
model Brand {
  id       Int       @id @default(autoincrement())
  name     String?   @db.VarChar(50)
  products Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  memberId  BigInt
  createdAt DateTime?  @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime?  @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  member    Member     @relation(fields: [memberId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_item")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String  @db.Text
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductFavorite {
  id        Int       @id @default(autoincrement())
  memberId  BigInt
  productId Int
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  member    Member    @relation(fields: [memberId], references: [id])
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String?      @unique @db.VarChar(12)
  member        Member      @relation(fields: [memberId], references: [id])
  memberId      BigInt
  total         Int
  fee           Int
  recipient     String      @db.VarChar(100)
  storeName     String?
  phone         String      @db.VarChar(20)
  address       String?     @db.Text
  createdAt     DateTime?   @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt     DateTime?   @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  status        Status      @relation(fields: [statusId], references: [id])
  statusId      Int
  payment       Payment     @relation(fields: [paymentId], references: [id])
  paymentId     Int
  delivery      Delivery    @relation(fields: [deliveryId], references: [id])
  deliveryId    Int
  invoice       Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId     Int
  invoiceNumber String      @db.VarChar(20)
  tax           String?     @db.VarChar(8)
  carrier       String?     @db.VarChar(50)
  orderItems    OrderItem[]
}

model Payment {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  orders       Order[]
  reservations Reservation[]
  booking      Booking[]
}

model Delivery {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(50)
  orders Order[]
}

model Invoice {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(20)
  orders       Order[]
  reservations Reservation[]
  booking      Booking[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int?
  quantity    Int
  price       Int
  productName String?  @map("product_name") @db.VarChar(50)
  status      String   @default("active") @db.VarChar(20)
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id], onDelete: NoAction)

  @@map("order_item")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(50)
  brandId          Int
  sportId          Int
  price            Int
  stock            Int
  material         String?           @db.VarChar(50)
  size             String?           @db.VarChar(50)
  weight           Int?
  origin           String?           @db.VarChar(50)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
  brand            Brand             @relation(fields: [brandId], references: [id])
  sport            Sport             @relation(fields: [sportId], references: [id])
  images           ProductImage[]
  productFavorites ProductFavorite[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
}

// #endregion 商城

// #region 課程
model Coach {
  id       Int     @id @default(autoincrement())
  member   Member  @relation(fields: [memberId], references: [id])
  memberId BigInt  @unique @map("member_id")
  sport    Sport   @relation(fields: [sportId], references: [id])
  sportId  Int     @map("sport_id")
  bio      String? @db.VarChar(200)
  avatar   String? @db.Text

  lessons Lesson[]
}

model Lesson {
  id Int @id @default(autoincrement())

  // 基本資訊
  title       String  @db.VarChar(100) // "7月網球初級班"
  description String? @db.Text

  // 關聯資源
  sport      Sport         @relation(fields: [sportId], references: [id])
  sportId    Int           @map("sport_id") // 修正：原本是 sport__id
  court      Court         @relation(fields: [courtId], references: [id])
  courtId    Int           @map("court_id")
  coach      Coach         @relation(fields: [coachId], references: [id])
  coachId    Int           @map("coach_id")
  timeSlot   TimeSlot      @relation(fields: [timeSlotId], references: [id])
  timeSlotId Int           @map("time_slot_id")
  images     LessonImage[]

  // 排程設定
  dayOfWeek String   @map("day_of_week") @db.VarChar(10) // 1=星期一, 7=星期日
  startDate DateTime @map("start_date") @db.Date // 課程系列開始日期
  endDate   DateTime @map("end_date") @db.Date // 課程系列結束日期

  // 課程設定
  price        Int // 整個系列價格
  maxCapacity  Int @map("max_capacity") // 最大人數
  currentCount Int @default(0) @map("current_count") // 目前報名人數

  // 報名記錄
  bookings Booking[]

  // 時間戳記
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model LessonImage {
  id       Int    @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  url      String @db.VarChar(255)
  order    Int    @default(0)

  @@map("lesson_image")
}

model Booking {
  id            Int       @id @default(autoincrement())
  member        Member    @relation(fields: [memberId], references: [id])
  memberId      BigInt
  lesson        Lesson    @relation(fields: [lessonId], references: [id])
  lessonId      Int
  price         Int
  payment       Payment   @relation(fields: [paymentId], references: [id])
  paymentId     Int       @map("payment_id")
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     Int       @map("invoice_id")
  invoiceNumber String    @map("invoice_number") @db.VarChar(20)
  tax           String?   @map("tax") @db.VarChar(8)
  carrier       String?   @map("carrier") @db.VarChar(50)
  status        Status?   @relation(fields: [statusId], references: [id])
  statusId      Int?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.DateTime(6)
}

// #endregion 課程
